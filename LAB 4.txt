package library;
public class Stack {
private int arr[]; private int top; private int capacity;

Stack(int size) {
capacity = size;
arr = new int[capacity]; top = -1;
}

Stack(int[] inputArr) {
capacity = inputArr.length; arr = new int[capacity];
for (int i = 0; i < inputArr.length; i++) { arr[i] = inputArr[i];
}
top = inputArr.length - 1;
}

void push(int x) {
if (top == capacity - 1) {
System.out.println("Stack Overflow! Cannot push " + x);
return;
}
arr[++top] = x;
System.out.println(x + " pushed into stack.");
}

void push(int x,int y) { push(x);
push(y);
}

int pop() {
if (top == -1) {
System.out.println("Stack Underflow!");
return -1;
}
return arr[top--];
}

void pop(int n) {
if (n > top + 1) {
System.out.println("not enough elements to pop " + n);
return;
}
System.out.print("Popped elements: ");
for (int i = 0; i < n; i++) { System.out.print(arr[top--] + " ");
}
System.out.println();
}

void display() {
if (top == -1) {
System.out.println("Stack is empty.");
return;
 
}
System.out.print("Stack (top to bottom): ");
for (int i = top; i >=0; i--) {
System.out.print(arr[i] + " ");
}
System.out.println();
}

void display(int n) {
if (top == -1) {
System.out.println("Stack is empty.");
return;
}
if (n> top + 1) {
System.out.println("Stack has only " + (top + 1)+ " elements."); n = top + 1;
}
System.out.print("Top " + n + " elements: ");
for (int i = top; i > top - n; i--) {
System.out.print(arr[i] + " ");
}
System.out.println();
}
}


package library;
import java.util.Scanner;

public class LibrarystackDemo {
public static void main(String[] args) { Scanner sc = new Scanner(System.in);
Stack st = null;

System.out.println("Choose how to initialize stack"); System.out.println("1. Empty stack with size"); System.out.println("2. Stack initialize with array"); int choice = sc.nextInt();
if (choice == 1)
{
System.out.print("Enter size of stack:");
int size = sc.nextInt(); st = new Stack(size);
}
else if (choice == 2)
{
System.out.print("Enter number of elements:");
int n = sc.nextInt();
int arr[] = new int[n]; System.out.println("Enter elements:"); for (int i = 0; i<n; i++)
{
arr[i] = sc.nextInt();
}
 

}
else {


}
 
st = new Stack(arr);

System.out.println("Invalid choice. Exiting.");
return;
 
int option;
do {
System.out.println("\n ---Stack Menu ---"); System.out.println("1. Push one element"); System.out.println("2. Push two element"); System.out.println("3. Pop one element"); System.out.println("4. Pop multiple elements"); System.out.println("5. Display full stack"); System.out.println("6. Display top n elements"); System.out.println("7. Exit"); System.out.print("Enter your choice:");
option = sc.nextInt();

switch(option)
{
case 1:
System.out.print("Enter element:"); int val = sc.nextInt(); st.push(val);;
break; case 2:
System.out.print("Enter two elements:");
int v1 = sc.nextInt(); int v2 = sc.nextInt(); st.push(v1,v2); break;
case 3:
int poppedd = st.pop();
if (poppedd != -1)
System.out.println("Popped:"+ poppedd);
break; case 4:
System.out.print("Enter number of elements to pop:");
int n = sc.nextInt(); st.pop(n);
break; case 5:
st.display();
break; case 6:
System.out.print("Enter number of top elements:");
int topN = sc.nextInt(); st.display(topN); break;
case 7:
System.out.print("Exiting...");
break; default:
System.out.println("Invalid choice");
}
}while(option !=7);
}
}

OUTPUT:

Choose how to initialize stack
1.	Empty stack with size
2.	Stack initialize with array 1
Enter size of stack:3
 
---Stack Menu ---
1.	Push one element
2.	Push two element
3.	Pop one element
4.	Pop multiple elements
5.	Display full stack
6.	Display top n elements
7.	Exit
Enter your choice:1 Enter element:8
8 pushed into stack.

---Stack Menu ---
1.	Push one element
2.	Push two element
3.	Pop one element
4.	Pop multiple elements
5.	Display full stack
6.	Display top n elements
7.	Exit
Enter your choice:1 Enter element:20
20 pushed into stack.

---Stack Menu ---
1.	Push one element
2.	Push two element
3.	Pop one element
4.	Pop multiple elements
5.	Display full stack
6.	Display top n elements
7.	Exit
Enter your choice:2 Enter two elements:4 10
4 pushed into stack.
Stack Overflow! Cannot push 10
---Stack Menu ---
1.	Push one element
2.	Push two element
3.	Pop one element
4.	Pop multiple elements
5.	Display full stack
6.	Display top n elements
7.	Exit
Enter your choice:5
Stack (top to bottom): 4 20 8
---Stack Menu ---
1.	Push one element
2.	Push two element
3.	Pop one element
4.	Pop multiple elements
5.	Display full stack
6.	Display top n elements
7.	Exit
Enter your choice:3 Popped:4

---Stack Menu ---
 
1.	Push one element
2.	Push two element
3.	Pop one element
4.	Pop multiple elements
5.	Display full stack
6.	Display top n elements
7.	Exit
Enter your choice:2 Enter two elements:19 33
19 pushed into stack.
Stack Overflow! Cannot push 33

---Stack Menu ---
1.	Push one element
2.	Push two element
3.	Pop one element
4.	Pop multiple elements
5.	Display full stack
6.	Display top n elements
7.	Exit
Enter your choice:4
Enter number of elements to pop:2 Popped elements: 19 20

---Stack Menu ---
1.	Push one element
2.	Push two element
3.	Pop one element
4.	Pop multiple elements
5.	Display full stack
6.	Display top n elements
7.	Exit
Enter your choice:6
Enter number of top elements:2 Stack has only 1 elements.
Top 1 elements: 8
---Stack Menu ---
1.	Push one element
2.	Push two element
3.	Pop one element
4.	Pop multiple elements
5.	Display full stack
6.	Display top n elements
7.	Exit
Enter your choice:3 Popped:8

---Stack Menu ---
1.	Push one element
2.	Push two element
3.	Pop one element
4.	Pop multiple elements
5.	Display full stack
6.	Display top n elements
7.	Exit
Enter your choice:3 Stack Underflow!

---Stack Menu ---
1.	Push one element
 
2.	Push two element
3.	Pop one element
4.	Pop multiple elements
5.	Display full stack
6.	Display top n elements
7.	Exit
Enter your choice:7 Exiting...
